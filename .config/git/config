# Note that ancient versions of git may not load configuration from
# ~/.config/git/config, loading only ~/.gitconfig.  Using git >= 2.0 is
# _strongly_ recommended!

[alias]
    # SIMPLE "SHORTCUT" ALIASES

    a = add
    aa = add --all
    an = add --all --intent-to-add   # start tracking all files but don't stage their content yet
    ap = add --patch   # interactively select hunks to add, very useful
    au = add --update   # stage all changes in already tracked files

    b = branch
    bd = branch --delete
    bdf = branch -D
    bm = !git branch --merged | grep -v '*'
    bma = !git branch --all --merged | grep -v '*'
    # filter out main repo branch (safeguard for case of bulk removal of merged branches)
    bmr = !git branch --remote --merged origin/HEAD | grep -v $(git rev-parse --abbrev-ref origin/HEAD)

    c  = checkout
    co = checkout
    c1 = checkout HEAD~1
    cb = checkout -b
    cd = checkout devel
    cm = !git checkout $(git mainline)
    com = !git checkout origin/$(git mainline)
    cu = checkout @{upstream}

    dt = checkout --detach   # e.g. for throw-away experiments

    chp = cherry-pick

    # One Alias to Commit Them All. Automatically adds --all and --message
    # when appropriate. See bin/git-smart-commit
    ci  = smart-commit
    amci= smart-commit --amend
    amq = smart-commit --amend --no-edit
    wip = smart-commit WIP --no-verify

    cip = !git smart-commit "$@" && git push --quiet && true
    paf = !git amd --no-edit --quiet && git puf --quiet

    empty = commit --allow-empty --message  # handy for test commits

    d = diff --find-copies=62% --find-copies-harder --inter-hunk-context=13 --submodule=log
    dd = diff --find-copies=62% --find-copies-harder --inter-hunk-context=13 --submodule=diff
    dc = !git d --cached   # preview changes staged for commit
    ds = !git d --stat   # force coloring for use with less -R
    # would be great if it included non-committed changes...
    dm = !git d $(git merge-base origin/HEAD HEAD)
    du = !git d @{upstream}
    dsm = !git ds $(git mainline)
    dsu = !git ds @{upstream}
    wd = !git d --word-diff=color   # mnemonic: Word-Diff
    wdc = !git d --word-diff=color --cached
    coldif = !git d --word-diff=color --word-diff-regex="[0-9a-zA-Z]+"

    d5 = !git d --unified=5
    d8 = !git d --unified=8
    d13 = !git d --unified=13

    f = fetch --prune
    fa = fetch --all --prune

    # I tried do define 'g2', 'g3' etc. using 'g' alias to reduce duplication
    # (like this: g2 = !git g --context 2), but it turns out that when I use
    # '!git' construct, the command will always be ran from the repository root
    # (which in case of grep changes the behaviour, as it searches only inside
    # path from which it's ran).
    g   = grep --extended-regexp --textconv --ignore-case
    g1  = grep --extended-regexp --textconv --ignore-case --line-number --context 1
    # when I want to see more context, I don't want filenames obscuring my
    # view.  This also makes it possible to copy-and-paste code snippets.
    g2  = grep --extended-regexp --textconv --ignore-case --heading --context 3
    g3 = -c color.grep.filename='magenta bold' grep --extended-regexp --textconv --ignore-case --heading --context 5
    g4 = -c color.grep.filename='magenta bold' grep --extended-regexp --textconv --ignore-case --heading --context 13
    # matches pattern only at word boundaries
    gw  = grep --extended-regexp --textconv --ignore-case --line-number --word-regexp
    ghw = grep --extended-regexp --textconv --ignore-case --heading --word-regexp --context 8

    # search, pipe the results to less and set less' search pattern (for navigating results with n/N)
    gl = !GIT_PAGER=\"less -p $@\" \
      git -c color.grep.filename='blue black' \
      grep --extended-regexp --textconv --ignore-case \
      --heading --before-context 8 --after-context 13

    # search whole repository, not only current directory.
    # (in `!...` construct, commands are executed from repository root dir)
    gg = !git g
    gg3 = !git g3
    gg5 = !git g5
    gg8 = !git g8

    fl = ls-files

    mra  = merge --abort
    ff   = merge --ff-only
    noff = merge --no-ff

    mb = merge-base @  # find where current branch diverged from another branch
    mbm = merge-base HEAD MERGE_HEAD  # merge base of current ongoing merge

    # displaying changes that led to merge conflict
    ecl = explain-conflict --left
    ecr = explain-conflict --right

    mw = mv  # I'm used to using `mw` (customized mv) in shell

    # unlike plain `pull`, this won't attempt a merge that may result in conflicts
    pl = pull --ff-only
    plr = pull --rebase

    pu = push
    puf = push --force-with-lease
    please = push --force-with-lease
    # push to a new branch with the same name
    pub = !git push --set-upstream origin $(git symbolic-ref --short HEAD)
    # tags have to be pushed explicitly
    put = !git push --tags && git push

    rb   = rebase
    rba  = rebase --abort
    rbc  = rebase --continue
    rbo  = rebase --onto        # quite useful, see examples in 'git help rebase'
    rbd  = rebase devel
    rbu  = rebase @{upstream}
    rbm  = !git rebase $(git mainline)
    rbi  = rebase --interactive
    rbid = rebase --interactive devel
    rbiu = rebase --interactive @{upstream}
    rbim = !git rebase --interactive $(git mainline)

    rt = remote --verbose

    rs = reset
    rs1 = reset HEAD~1   # "soft undo" - remove last commit, but keep its changes

    rss = reset --soft
    rss1 = reset --soft HEAD~1

    sr  = safe-branch-reset
    sru = safe-branch-reset @{upstream}

    sh = stash
    shp = stash pop

    s = status --short   # see also --branch option
    st = !git log --oneline --no-decorate -1 && git -c status.submodulesummary=false status && git submodule-details
    su = status --short --untracked-files=all
    si = status --short --ignored
    sa = status --short --untracked-files=all --ignored

    sm = submodule

    # "SUbmodule UPdate"
    # submodule init and submodule sync are needed because some submodules may
    # have been added in the other branch or their remotes changed.
    sup = "!sh -c 'git submodule init $@ && \
        git submodule sync --recursive $@ > /dev/null && \
        git submodule update --recursive $@' -"

    spush = push --recurse-submodules=on-demand

    # "Checkout with Submodules"
    # Handles uncommitted changes gracefully (if they don't conflict, they are
    # transplanted, if they do, the update is not performed and an error is
    # printed).
    cs = !git checkout $@ && git su && true

    tp = rm  # I'm used to using `tp` (trash-put) in shell

    who = shortlog --summary --numbered

    # translate HEAD to branch/tag name
    ref-name = !git rev-parse --abbrev-ref 2>/dev/null
    # get name of the default branch (from origin/HEAD), with fallback to "master"
    mainline = !git ref-name origin/HEAD | sed 's|origin/||' | sed 's|^HEAD$|master|'

    mine = !git log2 --no-merges --author=\"$(git config --get user.name)\"
    payroll = !git mine --date human --since '1 month ago'

    # Fix: "smart amend". See ~/bin/git-smart-amend
    fix = smart-amend
    fix1 = smart-amend @~1
    fix2 = smart-amend @~2
    fixa = !git smart-amend $@ --all && true
    fixa1 = !git smart-amend @~1 --all && true
    fixa2 = !git smart-amend @~2 --all && true



    # PRETTY LOGS

    # Inspired by http://stackoverflow.com/questions/1057564/pretty-git-branch-graphs

    # compact log with line wrapping. Two lines per commit -> fits narrow windows
    log2 = log --graph --date=relative --format='%C(auto)%h%d %C(white)%an, %ad%C(reset)%n%w(80,2,2)%s'

    l = log2

    # one-line version, useful when you want to squeeze a lot of commits on the screen
    log1 = log --graph --date=relative --format='%C(auto)%h -%d %s %C(white)- %an, %ad%C(reset)'

    # "Long" format - full commit message and summary of changes.
    ll  = log --graph --stat-graph-width=30 --date=iso --stat-count=100


    # Common commit sets

    # commit divergence between current branch, its upstream and mainline
    ls = !git log2 --boundary $(git relevant-commits)

    # commits in current branch and its upstream since branching point -
    # almost like HEAD...@{upstream}, but including boundary commit
    lu = !git log2 HEAD @{upstream} $(git merge-base HEAD @{upstream})^!

    # commits from all local branches unmerged to mainline
    lb  = !git log2 HEAD --branches origin/$(git mainline)^!

    # better than using --all because I don't want stashes to be shown
    la  = !git log2 HEAD --branches --remotes

    # unpushed/unmerged commits on all branches
    unp = !GIT_PAGER='less -REXS' git log2 --boundary --date-order --branches --not --remotes
    unm = !GIT_PAGER='less -REXS' git log2 --boundary --date-order --remotes --not --branches


    # Simplified graphs

    # log following just the first parent of each merge, resulting in a nice
    # condensed overview of the history if feature branches are used
    lf  = log --first-parent --date=relative --format='%C(auto)%h -%d %s %C(white)- %an, %ad%C(reset)'

    # include '-m' so that merge commit diffs will be shown if requested with '-p'
    llf = log --stat-graph-width=30 --date=iso --stat-count=30 --first-parent -m

    laf = !git lf HEAD --branches --remotes --graph

    ln  = log2 --no-merges


    # Logs with commit diffs

    # Without --graph because sometimes I want to copy some code from the diff,
    # and each commit is so long that the graph is not readable anyway.
    lp  = !GIT_PAGER='~/bin/smartless -p^commit' git log --patch --submodule=log --topo-order
    lpp = log --patch --submodule=diff --topo-order
    lpw = log --patch --submodule=log --topo-order --word-diff=color
    lpf = log --patch --submodule=log --topo-order --first-parent
    # when using a pathspec to limit commits, still show changes in all files
    lpd = log --patch --submodule=log --topo-order --full-diff
    lpr = !GIT_PAGER='~/bin/smartless -p^commit' \
          git log --patch --reverse $(git mainline)..HEAD


    # Informative reflog

    # reflog with dates and commit message subject
    rf = log --walk-reflogs --abbrev=10\
         --format='%>(10)%gd %C(auto)%h %gs%d%n     %C(white)%<(21,trunc)%ci%x08%x08%x08%x08%x08 %<(60,trunc)%s%C(reset)'

    # one-line version of the above
    rf1 = log --walk-reflogs \
          --format='%C(white)%<(21,trunc)%ci%x08%x08%x08%x08%x08 %C(auto)%<(9)%gd %h %gs %C(white)- %<(33,trunc)%s%C(reset)'



    # MULTIPLE IDENTITY MANAGEMENT

    # Configure which email to use in current repo
    id-gmail    = config user.email jan.warchol@gmail.com
    id-fatninja = config user.email jan.warchol@fat.ninja
    id-scramjet = config user.email jan.warchol@scramjet.org
    id-daftcode = config user.email jan.warchol@daftcode.pl



    # MORE SOPHISTICATED COMMANDS

    # trash - discard changes
    #
    # Use this command instead of `reset --hard`, as it makes it possible to undo
    # the trashing.  Right now this is implemented simply by using `stash` command,
    # so to bring back discarded changes you just do `git stash pop <stash>`.
    #
    # Useful options:
    #     -p    select which hunks to discard
    #     -u    also remove untracked files
    #     -a    also remove untracked and ignored files
    #
    # TODO:
    # - add support for trashing changes in indvidual files
    # - rewrite this as a standalone git command
    # - send a patch upstream?
    #
    trash = !sh -c 'git stash save "$@" "changes trashed on $(date +\"%Y-%m-%d %H:%M\")"' -

    # temporarily ignoring files, see
    # http://gitready.com/intermediate/2009/02/18/temporarily-ignoring-files.html
    ignore = update-index --assume-unchanged
    unignore = update-index --no-assume-unchanged
    ignored = !git ls-files -v | grep "^[a-z]"

    # "merge-base diff"
    mbd = !git diff `git merge-base HEAD $1`

    # find $2-th commit on current branch since $1
    nth-since = !git rev-list $1..HEAD | tac | sed -n \"$2p\" && true

    # search and replace in all tracked files (relative to current dir) except
    # - submodule entries (to avoid errors)
    # - symbolic links (to avoid transforming them to ordinary files)
    # usage: git sed 's/foo/bar/'
    sed = !git ls-files --stage $GIT_PREFIX | grep -v "^160000" | grep -v "^120000" | cut -f2 | xargs --delimiter='\n' sed -i -r -e 

    # delete current branch
    bdc = !sh -c 'BRANCH=$(git rev-parse --abbrev-ref HEAD) \
        && git checkout $(git mainline) \
        && git branch --delete $BRANCH'


[advice]
    detachedHead = false

# configuration for managing files encrypted with ansible vault
# See https://github.com/building5/ansible-vault-tools
[diff "ansible-vault"]
    textconv = ansible-vault view
    # enable caching decrypted content (less secure, but much faster)
    cachetextconv = true
[merge "ansible-vault"]
    name = ansible-vault merge driver
    driver = ansible-vault-merge %O %A %B %P

[diff "pandoc"]
    textconv=pandoc --to=markdown
    prompt = false

[color]
    ui = auto

[color "branch"]
    remote = blue

[color "decorate"]
    remoteBranch = blue

[color "diff"]
    meta = white

[color "status"]
    changed = yellow
    untracked = cyan

[color "grep"]
    filename = white black
    match = yellow bold
    separator = cyan black

[commit]
    template = ~/.config/git/commit-message-template

[core]
    # display non-ASCII characters (e.g. Polish) instead of quoting them
    quotepath = false
    # we want to use non-GUI vim (i.e. run it inside terminal) because GUI Vim
    # would fork and cause Git to exit with "Aborting due to empty commit message"
    editor = vim
    excludesfile = ~/.config/git/ignore
    pager = ~/bin/smartless

[diff]
    # detect renamed files and show only actual differences between versions
    renames = copies
    submodule = log

[help]
    # correct and run mistyped commands after 1.2 sec delay
    autocorrect = 12

# [log]
#     decorate = false

[status]
    submoduleSummary = true

[submodule]
    recurse = true

[merge]
    # in case of merge conflict also show how common ancestor looked like
    conflictstyle = diff3

    # Add summaries of merged commits to the merge commit message.
    log = true

[pager]
    # don't wrap lines in output of git blame
    blame = "less -SR"

[push]
    default = upstream

[rebase]
    # automatically process "fixup!" commits when rebasing interactively
    autosquash = true

    # stash unstaged changes if rebasing a dirty tree
    autostash = true

[user]
    # require explicit name and email in config, don't guess silly values
    useConfigOnly = true
    name = Jan Warchoł

# When connecting to my private repos, use `personal.*` alias so that SSH will
# use correct key to authenticate. See SSH config for more details.
[url "git@personal.bitbucket.org:jan-warchol"]
    insteadOf = git@bitbucket.org:jan-warchol
[url "git@personal.github.com:jan-warchol"]
    insteadOf = git@github.com:jan-warchol

[url "ssh://git@github.com/"]
        insteadOf = https://github.com/

[include]
    # load account-specific settings from a file managed outside dotfiles repo
    path = config.local
