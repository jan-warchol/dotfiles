# Note that old versions of git may not load configuration from ~/.config/git/config,
# loading only ~/.gitconfig.  I _strongly_ recommend installing latest git (>= 2.0)!

[alias]

    # SIMPLE "SHORTCUT" ALIASES

    a = add
    aa = add --all
    ap = add --patch   # interactively select hunks to add, very useful
    au = add --update   # stage only tracked files - usually you want this rather than --all

    b = branch
    bv = branch --verbose --verbose   # also prints SHAs and upstream branches

    c = checkout
    co = checkout   # I prefer 'c', but many people are used to 'co'
    c0 = checkout HEAD~0   # detach HEAD e.g. for throw-away experiments
    c1 = checkout HEAD~1
    c2 = checkout HEAD~2
    cb = checkout -b

    k = commit   # no git command starts with 'k', and 'k' matches pronunciation!
    ci = commit   # I prefer 'k', but many people are used to 'ci'
    ka = commit --all
    km = commit -m
    kma = commit --all -m   # 'kma' instead of 'kam' because it's easier to type
                            # and won't get confused with amending
    amn = commit --amend

    d = diff --color=always   # force coloring for use with less -R
    dc = diff --color=always --cached   # preview changes staged for commit
    wd = diff --color=always --word-diff=color   # mnemonic: Word-Diff
    wdc = diff --color=always --word-diff=color --cached

    f = fetch --prune
    fa = fetch --all --prune

    g = grep --color=always --line-number
    g5 = grep --color=always --line-number --context 5
    gh5 = grep --color=always --heading --context 5

    l = log --color=always --decorate
    lo = log --color=always --decorate --oneline --graph
    lp = log --color=always --decorate --patch
    lpw = log --color=always --decorate --patch --word-diff=color

    # push to a new branch on the remote with the same name
    psu = !git push --set-upstream origin $(git symbolic-ref --short HEAD)

    rba = rebase --abort
    rb = rebase
    rbc = rebase --continue
    rbo = rebase --onto   # quite useful, see examples in 'git help rebase'
    rbi = rebase --interactive
    rbi5 = rebase --interactive HEAD~5

    rt = remote --verbose

    rs = reset
    rs1 = reset HEAD~1

    sh = stash
    shp = stash pop

    s = status --short   # I prefer terse output.  See also --branch option.
    st = status



    # MORE SOPHISTICATED ALIASES

    # "smart amend"
    #
    # Fixup a specified commit and use rebase to merge the fixup (like commit --amend,
    # but for commits before the currently checked-out one - see the description of
    # --fixup option in `git commit` manpage).  By default the fixup will incorporate
    # staged changes, but you can also use `-a` option (or specify paths), like with
    # `git commit` itself.
    # Don't use this if there was a merge after the commit to be amended.
    #
    fix = "!sh -c 'set -e; \
        commit_id=$(git rev-parse $1); \
        shift; \
        git commit --fixup $commit_id $@; \
        if ! git diff --quiet HEAD; then \
            dirtytree=1; \
            echo \"Stashing your other changes...\"; \
            git stash save \"Stashed before amending $commit_id\"; \
        fi; \
        git rebase --interactive --autosquash $commit_id~; \
        if [ -n \"$dirtytree\" ]; then \
            git stash pop; \
        fi' -"

    # trash - discard changes
    #
    # Use this command instead of `reset --hard`, as it makes it possible to undo
    # the trashing.  Right now this is implemented simply by using `stash` command,
    # so to bring back discarded changes you just do `git stash pop <stash>`.
    #
    # Useful options:
    #     -p    select which hunks to discard
    #     -u    also remove untracked files
    #     -a    also remove untracked and ignored files
    #
    # TODO:
    # - add support for trashing changes in indvidual files
    # - rewrite this as a standalone git command
    # - send a patch upstream?
    #
    trash = !sh -c 'git stash save "$@" "changes trashed on $(date +\"%Y-%m-%d %H:%M\")"' -

    # temporarily ignoring files, see
    # http://gitready.com/intermediate/2009/02/18/temporarily-ignoring-files.html
    ignore = update-index --assume-unchanged
    unignore = update-index --no-assume-unchanged
    ignored = !git ls-files -v | grep "^[a-z]"



[color]
    ui = auto

[core]
    # display non-ASCII characters (e.g. Polish) instead of quoting them:
    quotepath = false

[diff]
    # detect copied stuff and display it appropriately
    renames = copies

[help]
    # correct and run mistyped commands after 1.5 sec delay
    autocorrect = 15

[merge]
    # in case of merge conflict also show common ancestor version
    conflictstyle = diff3

[push]
    default = simple

[rebase]
    # automatically process fixup! commits when rebasing interactively
    autosquash = true

[rerere]
    # Reuse recorded resolution of conflicted merges, see 'git help rerere'
    enabled = true
