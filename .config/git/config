# Note that old versions of git may not load configuration from ~/.config/git/config,
# loading only ~/.gitconfig.  I _strongly_ recommend installing latest git (>= 2.0)!

[alias]

    # SIMPLE "SHORTCUT" ALIASES

    a = add
    aa = add --all
    ap = add --patch   # interactively select hunks to add, very useful
    au = add --update   # stage only tracked files - usually you want this rather than --all

    b = branch
    bv = branch --verbose --verbose   # lists branches with SHAs and upstreams
    ba = branch --all
    br = branch --remotes
    bd = branch --delete
    BD = branch -D

    c = checkout
    co = checkout   # I prefer 'c', but many people are used to 'co'
    c0 = checkout HEAD~0   # detach HEAD e.g. for throw-away experiments
    c1 = checkout HEAD~1
    c2 = checkout HEAD~2
    cb = checkout -b
    cm = checkout master
    com = checkout origin/master

    # --verbose flag shows a preview of changes that will be committed when editing the
    # commit message - I no longer have to double-check with 'git diff' before committing!
    k = commit --verbose   # no git command starts with 'k', and 'k' matches pronunciation!
    ci = commit --verbose   # I prefer 'k', but many people are used to 'ci'
    ka = commit --verbose --all
    km = commit -m
    kma = commit --all -m   # 'kma' instead of 'kam' because it's easier to type
                            # and won't get confused with amending
    amn = commit --amend
    amna = commit --amend --all

    d = diff --color=always   # force coloring for use with less -R
    dc = diff --color=always --cached   # preview changes staged for commit
    wd = diff --color=always --word-diff=color   # mnemonic: Word-Diff
    wdc = diff --color=always --word-diff=color --cached

    f = fetch --prune
    fa = fetch --all --prune

    g = grep --color=always --line-number
    g5 = grep --color=always --line-number --context 5
    gh5 = grep --color=always --heading --context 5

    l = log --color=always --decorate   # force coloring for use with less -R
    lp = log --color=always --decorate --patch
    lpw = log --color=always --decorate --patch --word-diff=color

    # push to a new branch on the remote with the same name
    psu = !git push --set-upstream origin $(git symbolic-ref --short HEAD)

    rba = rebase --abort
    rb = rebase
    rbc = rebase --continue
    rbo = rebase --onto   # quite useful, see examples in 'git help rebase'
    rbi = rebase --interactive
    rbi5 = rebase --interactive HEAD~5
    rbim = rebase --interactive master
    rbm = rebase master

    rt = remote --verbose

    rs = reset
    rs1 = reset HEAD~1

    sh = stash
    shp = stash pop

    s = status --short   # I prefer terse output.  See also --branch option.
    st = status

    unpushed = !gitk --branches --not --remotes



    # PRETTY LOGS

    # When you're over ssh and cannot run gitk, or you don't want to switch context.
    # The names are mnemonics based on common aliases of 'ls' command.
    # based on http://stackoverflow.com/questions/1057564/pretty-git-branch-graphs

    # basic one-line log, I use it all the time
    ls = log --color=always --decorate --graph --date=relative \
    --format=tformat:'%C(auto)%h%C(reset) -%C(auto)%d%C(reset) %s %C(dim white)- %an, %ad%C(reset)'

    # as above, but shows all local and remote branches
    la = !"git ls --branches --remotes"

    # "Long" format - full commit message and summary of changes
    ll = log --color=always --decorate --graph --stat-graph-width=30 --stat-count=20 --date-order

    # two-line version, useful when your terminal window is narrow
    l2 = log --color=always --decorate --graph --date=iso --date-order \
    --format=tformat:'%C(auto)%h%C(reset) %s%n        %C(blue)%an%C(reset)%C(dim white), %ad%C(reset)%C(auto)%d%C(reset)'

    # and a two-line log showing all branches
    l2a = !"git l2 --branches --remotes"

    # reflog with dates
    rf = log --walk-reflogs --format='%C(bold cyan)%gd%C(reset) %C(auto)%h%C(reset) %<(25,trunc)%s (%gs) %C(dim white)- %ci%C(reset)'



    # MORE SOPHISTICATED ALIASES

    # "smart amend"
    #
    # Fixup a specified commit and use rebase to merge the fixup (like commit --amend,
    # but for commits before the currently checked-out one - see the description of
    # --fixup option in `git commit` manpage).  By default the fixup will incorporate
    # staged changes, but you can also use `-a` option (or specify paths), like with
    # `git commit` itself.
    # Don't use this if there was a merge after the commit to be amended.
    #
    fix = "!sh -c 'set -e; \
        commit_id=$(git rev-parse $1); \
        shift; \
        git commit --fixup $commit_id $@; \
        if ! git diff --quiet HEAD; then \
            dirtytree=1; \
            echo \"Stashing your other changes...\"; \
            git stash save \"Stashed before amending $commit_id\"; \
        fi; \
        git rebase --interactive --autosquash $commit_id~; \
        if [ -n \"$dirtytree\" ]; then \
            git stash pop; \
        fi' -"

    # trash - discard changes
    #
    # Use this command instead of `reset --hard`, as it makes it possible to undo
    # the trashing.  Right now this is implemented simply by using `stash` command,
    # so to bring back discarded changes you just do `git stash pop <stash>`.
    #
    # Useful options:
    #     -p    select which hunks to discard
    #     -u    also remove untracked files
    #     -a    also remove untracked and ignored files
    #
    # TODO:
    # - add support for trashing changes in indvidual files
    # - rewrite this as a standalone git command
    # - send a patch upstream?
    #
    trash = !sh -c 'git stash save "$@" "changes trashed on $(date +\"%Y-%m-%d %H:%M\")"' -

    # temporarily ignoring files, see
    # http://gitready.com/intermediate/2009/02/18/temporarily-ignoring-files.html
    ignore = update-index --assume-unchanged
    unignore = update-index --no-assume-unchanged
    ignored = !git ls-files -v | grep "^[a-z]"

    # gethub X Y Z - fetch branch Z from repo Y of github user X
    gethub = !sh -c 'git fetch https://github.com/$1/$2 $3 && \
        git checkout FETCH_HEAD && \
        git checkout -b "$1/$2/$3"' -



[color]
    ui = auto

[core]
    # display non-ASCII characters (e.g. Polish) instead of quoting them
    quotepath = false

[diff]
    mnemonicprefix = true

    # detect renamed files and show only actual differences between versions
    renames = copies

[help]
    # correct and run mistyped commands after 1.5 sec delay
    autocorrect = 15

[merge]
    # in case of merge conflict also show common ancestor version
    conflictstyle = diff3

[push]
    default = simple

[rebase]
    # automatically process "fixup!" commits when rebasing interactively
    autosquash = true

    # stash unstaged changes if rebasing a dirty tree
    autostash = true

[rerere]
    # Reuse recorded resolution of conflicted merges, see 'git help rerere'
    enabled = true
