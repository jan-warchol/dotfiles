#!/bin/bash

source "$HOME/.config/bash/ansi-color-codes.sh"

# Parse arguments, find which one represents repo URL.
while [ $# -gt 0 ]; do
  arg="$1"; shift

  case "$arg" in
    -*)
      options="$options $arg" ;;
    # see "GIT URLS" in git clone manpage for possible formats
    ssh://*|git://*|http://*|https://*|git@*)
      repo_url="$arg" ;;
    **)
      if [ -n "$repo_url" ]; then
        # directory can only be at the end, after repo url
        directory="$arg"
      else
        options="$options $arg"
      fi ;;
  esac
done

# Select email matching project namespace.
case "$repo_url" in
  *jw-git-examples/*)
    git_email=jan.warchol@gmail.com
    ;;
  *jan-warchol/*)
    git_email=jan.warchol@gmail.com
    ;;
  git@github.com:scramjet-cloud-platform/*)
    git_email=jan.warchol@scramjet.org
    ;;
  git@github.com:scramjetorg/*)
    git_email=jan.warchol@scramjet.org
    ;;
  git@github.com:FatNinjas/*)
    git_email=jan.warchol@fat.ninja
    ;;
  *)
esac
if [ -n "$git_email" ]; then
  options="$options --config user.email=$git_email"
fi

# namespace mapping
# junegunn -> różne
# organizer -> jan-warchol
# passwordstorne -> jan-warchol


# Clone into a specific subdir of ~/src.
namespace=$(echo $repo_url | cut -d: -f 2 | rev | cut -d/ -f 2 | rev)
if [ -n "$namespace" ]; then
  cd ~/src
  mkdir -p $namespace
  cd $namespace
fi

# --no-local -> don't confuse filter-repo
git clone --recurse-submodules --no-local $options $repo_url $directory &&

if [ -n "$git_email" ]; then
  echo -e "\nconfig: user.email set to ${_strong}$git_email${_reset}."
else
  echo -e "\nFailed to guess which email address to use. Set it manually."
fi
